#summary Advanced PyQt Examples
#labels Python,3dsMax,Tutorial

== Advanced PyQt Examples ==

=== Layouts ===

Ok, so we have a dialog with a button...whoop-dee-do.  It still looks pretty bad, what can we do that is better than in Maxscript?

In 3dsMax, if you COULD resize a rolloutcontrol, you'd be responsible for all the resizing code for it - which often time was a large enough pain that no one did it.

Qt removes the need for that with these things called Layouts.  Lets build a more exciting dialog this time shall we?

From here on out, I am done with the Maxscript corresponding code - it would require a lot of coding, along with knowledge and implementation of ActiveX or DotNet rollout controls...and I have used those enough to know I never want to use those again.

*Python*
{{{
from blur.wingui  import Dialog

from PyQt4.QtGui  import QHBoxLayout      # Spread widgets horizontally
from PyQt4.QtGui  import QVBoxLayout      # Spread widgets vertically

from PyQt4.QtGui  import QPushButton
from PyQt4.QtGui  import QTreeWidget      # Lets add a tree to the dialog...why not? its easy!

class TestDialog( Dialog ):
   def __init__( self ):
      Dialog.__init__( self )

      # Create the main layout
      layout = QVBoxLayout()
      
      # Add a tree
      self.uiObjectTREE = QTreeWidget( self )  # Create a tree, as a child of this dialog
      layout.addWidget( self.uiObjectTREE )    # Add the tree to the layout

      # Add buttons
      self.uiOkBTN = QPushButton( self )
      self.uiOkBTN.setText( 'Ok' )
      
      self.uiCancelBTN = QPushButton( self )
      self.uiCancelBTN.setText( 'Cancel' )

      # Lay the buttons out horizontally
      hlayout = QHBoxLayout()
      hlayout.addWidget( self.uiOkBTN )
      hlayout.addWidget( self.uiCancelBTN )

      # Add the horizontal layout to the main one
      layout.addLayout( hlayout )

      # Set the dialogs layout to hold all these widgets
      self.setLayout( layout )

# Create the dialog
dialog = TestDialog()
dialog.show()
}}}

=== Qt Designer ===

One of the main strengths that you can get from Qt is the Designer.  Qt does a good job of creating a true separation between code and graphics.

You can drag and drop widgets onto your dialog, save out an xml (.ui) file that can be loaded in on the fly.  It also has Layouts.  Layouts allow you to easily create *resizable* dialogs (something that was always a problem in Maxscript rollouts)