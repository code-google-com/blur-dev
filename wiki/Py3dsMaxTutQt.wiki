#summary Using PyQt for User Interfaces in 3dsMax
#labels Python,3dsMax,Tutorial

== PyQt User Interfaces ==

So now that you're getting a handle on how to program 3dsMax in Python, how do you start building tools?

==== The Bad News ====

You can't create tools the Maxscript way.  Rollouts are not creatable on the fly, they are actually processed directly in C++ through a string parser, which means there is no way to create a rollout in Python.

==== The Good News ====

We really don't want to create Maxscript rollouts anyway.  The Qt C++/Python framework is a powerful, fast, and user friendly model.  For a lot of you Maxscript programmers, it will seem very complex at first (believe me, I've been there), but as you begin working with Qt, you will find it is insanely easy to develop tools (not just for 3dsMax either - you'll be able to write cross-platform applications in PyQt as well!).

== How does it work? ==

To really get started understanding Qt, you should read up about it on their [http://qt.nokia.com website].  Download the code, work through some PyQt examples.  But here is a crash course on using it:

*Maxscript*
{{{
rollout uiMainROLL "Rollout Item" (
   button uiTestBTN "Test"
)
createDialog uiMainROLL
}}}

Now, there are a bunch of ways to create Qt widgets and dialogs.  This would be the simplest:

*Python*
{{{
# Use the blur.wingui package vs. the default PyQt4 packages for windows and dialogs
# because these items contain 3dsMax specific code needed to run

from blur.wingui import Dialog
from PyQt4.QtGui import QPushButton

# Create the dialog
dialog = Dialog()
button = QPushButton( dialog )
button.setText( 'Test' )

# Launch the dialog
dialog.show()

}}}

So, this is a very simple example.  And while it may seem right now in this simple of an example that there is not much benefit from creating PyQt dialogs vs. Maxscript Rollouts - believe me, as you start designing more complex tools, it becomes invaluable.

=== Dialogs vs. Windows ===

=== Sub-Classing ===

While the above example created a dialog and then added a button to it, that is not the generally preferred method to creating dialogs.  Normally, you will subclass a Dialog and create your own Dialog instance.

If you aren't up to speed on subclassing from the [Py3dsMaxTutClasses Structs & Classes] page, then you should get up to speed on how it works doing Python/PyQt docs and tutorials.

*Python*
{{{
from blur.wingui  import Dialog
from PyQt4.QtGui  import QPushButton

class MyDialog( Dialog ):
   def __init__( self ):
      Dialog.__init__( self )
      
      button = QPushButton( self )
      button.setText( 'Test' )

dialog = MyDialog()
dialog.show()
}}}

=== Qt Designer ===

One of the main strengths that you can get from Qt is the Designer.  Qt does a good job of creating a true separation between code and graphics.

You can drag and drop widgets onto your dialog, save out an xml (.ui) file that can be loaded in on the fly.  It also has Layouts.  Layouts allow you to easily create *resizable* dialogs (something that was always a problem in Maxscript rollouts)